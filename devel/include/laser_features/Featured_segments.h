// Generated by gencpp from file laser_features/Featured_segments.msg
// DO NOT EDIT!


#ifndef LASER_FEATURES_MESSAGE_FEATURED_SEGMENTS_H
#define LASER_FEATURES_MESSAGE_FEATURED_SEGMENTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <laser_features/Segment_featured.h>

namespace laser_features
{
template <class ContainerAllocator>
struct Featured_segments_
{
  typedef Featured_segments_<ContainerAllocator> Type;

  Featured_segments_()
    : header()
    , segments()  {
    }
  Featured_segments_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , segments(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::laser_features::Segment_featured_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::laser_features::Segment_featured_<ContainerAllocator> >::other >  _segments_type;
  _segments_type segments;





  typedef boost::shared_ptr< ::laser_features::Featured_segments_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::laser_features::Featured_segments_<ContainerAllocator> const> ConstPtr;

}; // struct Featured_segments_

typedef ::laser_features::Featured_segments_<std::allocator<void> > Featured_segments;

typedef boost::shared_ptr< ::laser_features::Featured_segments > Featured_segmentsPtr;
typedef boost::shared_ptr< ::laser_features::Featured_segments const> Featured_segmentsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::laser_features::Featured_segments_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::laser_features::Featured_segments_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace laser_features

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'laser_features': ['/home/pfeix/robot_host_ws/src/laser_features/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::laser_features::Featured_segments_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::laser_features::Featured_segments_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::laser_features::Featured_segments_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::laser_features::Featured_segments_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::laser_features::Featured_segments_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::laser_features::Featured_segments_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::laser_features::Featured_segments_<ContainerAllocator> >
{
  static const char* value()
  {
    return "53ca7ad138f7ae77d9c0f8765518fe7c";
  }

  static const char* value(const ::laser_features::Featured_segments_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x53ca7ad138f7ae77ULL;
  static const uint64_t static_value2 = 0xd9c0f8765518fe7cULL;
};

template<class ContainerAllocator>
struct DataType< ::laser_features::Featured_segments_<ContainerAllocator> >
{
  static const char* value()
  {
    return "laser_features/Featured_segments";
  }

  static const char* value(const ::laser_features::Featured_segments_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::laser_features::Featured_segments_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
laser_features/Segment_featured[] segments\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: laser_features/Segment_featured\n\
geometry_msgs/Point32[] points\n\
float32 class_id\n\
geometry_msgs/Point32 center\n\
float32 distance\n\
int32 nearest_neghbour_id\n\
\n\
float32 jump_distance_preceeding\n\
float32 jump_distance_succeeding\n\
float32 nearest_distance\n\
float32 sum_of_distances\n\
\n\
float32 number_of_points\n\
float32 std_deviation\n\
float32 mean_average_deviation_from_median\n\
float32 width\n\
float32 linearity\n\
float32 radius\n\
float32 circularity\n\
float32 boundary_length\n\
float32 boundary_regulatity\n\
float32 mean_curvature\n\
float32 mean_angular_difference\n\
float32 aspect_ratio\n\
float32 kurtosis\n\
\n\
#float32 div_distance_number_of_points\n\
#float32 div_distance_std_deviation\n\
#float32 div_distance_mean_average_deviation_from_median\n\
#float32 div_distance_width\n\
#float32 div_distance_linearity\n\
#float32 div_distance_radius\n\
#float32 div_distance_circularity\n\
#float32 div_distance_boundary_length\n\
#float32 div_distance_boundary_regulatity\n\
#float32 div_distance_mean_curvature\n\
#float32 div_distance_mean_angular_difference\n\
#float32 div_distance_aspect_ratio\n\
#float32 div_distance_kurtosis\n\
\n\
#float32 mlp_distance_number_of_points\n\
#float32 mlp_distance_std_deviation\n\
#float32 mlp_distance_mean_average_deviation_from_median\n\
#float32 mlp_distance_width\n\
#float32 mlp_distance_linearity\n\
#float32 mlp_distance_radius\n\
#float32 mlp_distance_circularity\n\
#float32 mlp_distance_boundary_length\n\
#float32 mlp_distance_boundary_regulatity\n\
#float32 mlp_distance_mean_curvature\n\
#float32 mlp_distance_mean_angular_difference\n\
#float32 mlp_distance_aspect_ratio\n\
#float32 mlp_distance_kurtosis\n\
\n\
#float32 div_number_std_deviation\n\
#float32 div_number_mean_average_deviation_from_median\n\
#float32 div_number_width\n\
#float32 div_number_linearity\n\
#float32 div_number_radius\n\
#float32 div_number_circularity\n\
#float32 div_number_boundary_length\n\
#float32 div_number_boundary_regulatity\n\
#float32 div_number_mean_curvature\n\
#float32 div_number_mean_angular_difference\n\
#float32 div_number_aspect_ratio\n\
#float32 div_number_kurtosis\n\
\n\
#float32 mlp_number_std_deviation\n\
#float32 mlp_number_mean_average_deviation_from_median\n\
#float32 mlp_number_width\n\
#float32 mlp_number_linearity\n\
#float32 mlp_number_radius\n\
#float32 mlp_number_circularity\n\
#float32 mlp_number_boundary_length\n\
#float32 mlp_number_boundary_regulatity\n\
#float32 mlp_number_mean_curvature\n\
#float32 mlp_number_mean_angular_difference\n\
#float32 mlp_number_aspect_ratio\n\
#float32 mlp_number_kurtosis\n\
\n\
\n\
float32 nn_number_of_points\n\
float32 nn_std_deviation\n\
float32 nn_mean_average_deviation_from_median\n\
float32 nn_width\n\
float32 nn_linearity\n\
float32 nn_radius\n\
float32 nn_circularity\n\
float32 nn_boundary_length\n\
float32 nn_boundary_regulatity\n\
float32 nn_mean_curvature\n\
float32 nn_mean_angular_difference\n\
float32 nn_aspect_ratio\n\
float32 nn_kurtosis\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const ::laser_features::Featured_segments_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::laser_features::Featured_segments_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.segments);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Featured_segments_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::laser_features::Featured_segments_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::laser_features::Featured_segments_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "segments[]" << std::endl;
    for (size_t i = 0; i < v.segments.size(); ++i)
    {
      s << indent << "  segments[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::laser_features::Segment_featured_<ContainerAllocator> >::stream(s, indent + "    ", v.segments[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LASER_FEATURES_MESSAGE_FEATURED_SEGMENTS_H
