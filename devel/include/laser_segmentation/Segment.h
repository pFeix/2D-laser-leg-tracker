// Generated by gencpp from file laser_segmentation/Segment.msg
// DO NOT EDIT!


#ifndef LASER_SEGMENTATION_MESSAGE_SEGMENT_H
#define LASER_SEGMENTATION_MESSAGE_SEGMENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point32.h>

namespace laser_segmentation
{
template <class ContainerAllocator>
struct Segment_
{
  typedef Segment_<ContainerAllocator> Type;

  Segment_()
    : points()
    , class_id(0)  {
    }
  Segment_(const ContainerAllocator& _alloc)
    : points(_alloc)
    , class_id(0)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::Point32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point32_<ContainerAllocator> >::other >  _points_type;
  _points_type points;

   typedef int32_t _class_id_type;
  _class_id_type class_id;





  typedef boost::shared_ptr< ::laser_segmentation::Segment_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::laser_segmentation::Segment_<ContainerAllocator> const> ConstPtr;

}; // struct Segment_

typedef ::laser_segmentation::Segment_<std::allocator<void> > Segment;

typedef boost::shared_ptr< ::laser_segmentation::Segment > SegmentPtr;
typedef boost::shared_ptr< ::laser_segmentation::Segment const> SegmentConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::laser_segmentation::Segment_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::laser_segmentation::Segment_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace laser_segmentation

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'laser_segmentation': ['/home/pfeix/robot_host_ws/src/laser_segmentation/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::laser_segmentation::Segment_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::laser_segmentation::Segment_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::laser_segmentation::Segment_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::laser_segmentation::Segment_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::laser_segmentation::Segment_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::laser_segmentation::Segment_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::laser_segmentation::Segment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "653812b29ee135129fc16022303c10e0";
  }

  static const char* value(const ::laser_segmentation::Segment_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x653812b29ee13512ULL;
  static const uint64_t static_value2 = 0x9fc16022303c10e0ULL;
};

template<class ContainerAllocator>
struct DataType< ::laser_segmentation::Segment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "laser_segmentation/Segment";
  }

  static const char* value(const ::laser_segmentation::Segment_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::laser_segmentation::Segment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point32[] points\n\
int32 class_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const ::laser_segmentation::Segment_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::laser_segmentation::Segment_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.points);
      stream.next(m.class_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Segment_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::laser_segmentation::Segment_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::laser_segmentation::Segment_<ContainerAllocator>& v)
  {
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
    s << indent << "class_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.class_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LASER_SEGMENTATION_MESSAGE_SEGMENT_H
