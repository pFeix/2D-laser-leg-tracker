# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from laser_features/Featured_segments.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import laser_features.msg
import std_msgs.msg

class Featured_segments(genpy.Message):
  _md5sum = "53ca7ad138f7ae77d9c0f8765518fe7c"
  _type = "laser_features/Featured_segments"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
laser_features/Segment_featured[] segments

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: laser_features/Segment_featured
geometry_msgs/Point32[] points
float32 class_id
geometry_msgs/Point32 center
float32 distance
int32 nearest_neghbour_id

float32 jump_distance_preceeding
float32 jump_distance_succeeding
float32 nearest_distance
float32 sum_of_distances

float32 number_of_points
float32 std_deviation
float32 mean_average_deviation_from_median
float32 width
float32 linearity
float32 radius
float32 circularity
float32 boundary_length
float32 boundary_regulatity
float32 mean_curvature
float32 mean_angular_difference
float32 aspect_ratio
float32 kurtosis

#float32 div_distance_number_of_points
#float32 div_distance_std_deviation
#float32 div_distance_mean_average_deviation_from_median
#float32 div_distance_width
#float32 div_distance_linearity
#float32 div_distance_radius
#float32 div_distance_circularity
#float32 div_distance_boundary_length
#float32 div_distance_boundary_regulatity
#float32 div_distance_mean_curvature
#float32 div_distance_mean_angular_difference
#float32 div_distance_aspect_ratio
#float32 div_distance_kurtosis

#float32 mlp_distance_number_of_points
#float32 mlp_distance_std_deviation
#float32 mlp_distance_mean_average_deviation_from_median
#float32 mlp_distance_width
#float32 mlp_distance_linearity
#float32 mlp_distance_radius
#float32 mlp_distance_circularity
#float32 mlp_distance_boundary_length
#float32 mlp_distance_boundary_regulatity
#float32 mlp_distance_mean_curvature
#float32 mlp_distance_mean_angular_difference
#float32 mlp_distance_aspect_ratio
#float32 mlp_distance_kurtosis

#float32 div_number_std_deviation
#float32 div_number_mean_average_deviation_from_median
#float32 div_number_width
#float32 div_number_linearity
#float32 div_number_radius
#float32 div_number_circularity
#float32 div_number_boundary_length
#float32 div_number_boundary_regulatity
#float32 div_number_mean_curvature
#float32 div_number_mean_angular_difference
#float32 div_number_aspect_ratio
#float32 div_number_kurtosis

#float32 mlp_number_std_deviation
#float32 mlp_number_mean_average_deviation_from_median
#float32 mlp_number_width
#float32 mlp_number_linearity
#float32 mlp_number_radius
#float32 mlp_number_circularity
#float32 mlp_number_boundary_length
#float32 mlp_number_boundary_regulatity
#float32 mlp_number_mean_curvature
#float32 mlp_number_mean_angular_difference
#float32 mlp_number_aspect_ratio
#float32 mlp_number_kurtosis


float32 nn_number_of_points
float32 nn_std_deviation
float32 nn_mean_average_deviation_from_median
float32 nn_width
float32 nn_linearity
float32 nn_radius
float32 nn_circularity
float32 nn_boundary_length
float32 nn_boundary_regulatity
float32 nn_mean_curvature
float32 nn_mean_angular_difference
float32 nn_aspect_ratio
float32 nn_kurtosis


================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z"""
  __slots__ = ['header','segments']
  _slot_types = ['std_msgs/Header','laser_features/Segment_featured[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,segments

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Featured_segments, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.segments is None:
        self.segments = []
    else:
      self.header = std_msgs.msg.Header()
      self.segments = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.segments)
      buff.write(_struct_I.pack(length))
      for val1 in self.segments:
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_f().pack(val1.class_id))
        _v1 = val1.center
        _x = _v1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_fi30f().pack(_x.distance, _x.nearest_neghbour_id, _x.jump_distance_preceeding, _x.jump_distance_succeeding, _x.nearest_distance, _x.sum_of_distances, _x.number_of_points, _x.std_deviation, _x.mean_average_deviation_from_median, _x.width, _x.linearity, _x.radius, _x.circularity, _x.boundary_length, _x.boundary_regulatity, _x.mean_curvature, _x.mean_angular_difference, _x.aspect_ratio, _x.kurtosis, _x.nn_number_of_points, _x.nn_std_deviation, _x.nn_mean_average_deviation_from_median, _x.nn_width, _x.nn_linearity, _x.nn_radius, _x.nn_circularity, _x.nn_boundary_length, _x.nn_boundary_regulatity, _x.nn_mean_curvature, _x.nn_mean_angular_difference, _x.nn_aspect_ratio, _x.nn_kurtosis))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.segments is None:
        self.segments = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.segments = []
      for i in range(0, length):
        val1 = laser_features.msg.Segment_featured()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point32()
          _x = val2
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          val1.points.append(val2)
        start = end
        end += 4
        (val1.class_id,) = _get_struct_f().unpack(str[start:end])
        _v2 = val1.center
        _x = _v2
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = val1
        start = end
        end += 128
        (_x.distance, _x.nearest_neghbour_id, _x.jump_distance_preceeding, _x.jump_distance_succeeding, _x.nearest_distance, _x.sum_of_distances, _x.number_of_points, _x.std_deviation, _x.mean_average_deviation_from_median, _x.width, _x.linearity, _x.radius, _x.circularity, _x.boundary_length, _x.boundary_regulatity, _x.mean_curvature, _x.mean_angular_difference, _x.aspect_ratio, _x.kurtosis, _x.nn_number_of_points, _x.nn_std_deviation, _x.nn_mean_average_deviation_from_median, _x.nn_width, _x.nn_linearity, _x.nn_radius, _x.nn_circularity, _x.nn_boundary_length, _x.nn_boundary_regulatity, _x.nn_mean_curvature, _x.nn_mean_angular_difference, _x.nn_aspect_ratio, _x.nn_kurtosis,) = _get_struct_fi30f().unpack(str[start:end])
        self.segments.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.segments)
      buff.write(_struct_I.pack(length))
      for val1 in self.segments:
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_f().pack(val1.class_id))
        _v3 = val1.center
        _x = _v3
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_fi30f().pack(_x.distance, _x.nearest_neghbour_id, _x.jump_distance_preceeding, _x.jump_distance_succeeding, _x.nearest_distance, _x.sum_of_distances, _x.number_of_points, _x.std_deviation, _x.mean_average_deviation_from_median, _x.width, _x.linearity, _x.radius, _x.circularity, _x.boundary_length, _x.boundary_regulatity, _x.mean_curvature, _x.mean_angular_difference, _x.aspect_ratio, _x.kurtosis, _x.nn_number_of_points, _x.nn_std_deviation, _x.nn_mean_average_deviation_from_median, _x.nn_width, _x.nn_linearity, _x.nn_radius, _x.nn_circularity, _x.nn_boundary_length, _x.nn_boundary_regulatity, _x.nn_mean_curvature, _x.nn_mean_angular_difference, _x.nn_aspect_ratio, _x.nn_kurtosis))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.segments is None:
        self.segments = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.segments = []
      for i in range(0, length):
        val1 = laser_features.msg.Segment_featured()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point32()
          _x = val2
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          val1.points.append(val2)
        start = end
        end += 4
        (val1.class_id,) = _get_struct_f().unpack(str[start:end])
        _v4 = val1.center
        _x = _v4
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _x = val1
        start = end
        end += 128
        (_x.distance, _x.nearest_neghbour_id, _x.jump_distance_preceeding, _x.jump_distance_succeeding, _x.nearest_distance, _x.sum_of_distances, _x.number_of_points, _x.std_deviation, _x.mean_average_deviation_from_median, _x.width, _x.linearity, _x.radius, _x.circularity, _x.boundary_length, _x.boundary_regulatity, _x.mean_curvature, _x.mean_angular_difference, _x.aspect_ratio, _x.kurtosis, _x.nn_number_of_points, _x.nn_std_deviation, _x.nn_mean_average_deviation_from_median, _x.nn_width, _x.nn_linearity, _x.nn_radius, _x.nn_circularity, _x.nn_boundary_length, _x.nn_boundary_regulatity, _x.nn_mean_curvature, _x.nn_mean_angular_difference, _x.nn_aspect_ratio, _x.nn_kurtosis,) = _get_struct_fi30f().unpack(str[start:end])
        self.segments.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_fi30f = None
def _get_struct_fi30f():
    global _struct_fi30f
    if _struct_fi30f is None:
        _struct_fi30f = struct.Struct("<fi30f")
    return _struct_fi30f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
