# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from laser_features/Segment_featured.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class Segment_featured(genpy.Message):
  _md5sum = "6151e5e19cab3935f12db4c2e82530b4"
  _type = "laser_features/Segment_featured"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Point32[] points
float32 class_id
geometry_msgs/Point32 center
float32 distance
int32 nearest_neghbour_id

float32 jump_distance_preceeding
float32 jump_distance_succeeding
float32 nearest_distance
float32 sum_of_distances

float32 number_of_points
float32 std_deviation
float32 mean_average_deviation_from_median
float32 width
float32 linearity
float32 radius
float32 circularity
float32 boundary_length
float32 boundary_regulatity
float32 mean_curvature
float32 mean_angular_difference
float32 aspect_ratio
float32 kurtosis

#float32 div_distance_number_of_points
#float32 div_distance_std_deviation
#float32 div_distance_mean_average_deviation_from_median
#float32 div_distance_width
#float32 div_distance_linearity
#float32 div_distance_radius
#float32 div_distance_circularity
#float32 div_distance_boundary_length
#float32 div_distance_boundary_regulatity
#float32 div_distance_mean_curvature
#float32 div_distance_mean_angular_difference
#float32 div_distance_aspect_ratio
#float32 div_distance_kurtosis

#float32 mlp_distance_number_of_points
#float32 mlp_distance_std_deviation
#float32 mlp_distance_mean_average_deviation_from_median
#float32 mlp_distance_width
#float32 mlp_distance_linearity
#float32 mlp_distance_radius
#float32 mlp_distance_circularity
#float32 mlp_distance_boundary_length
#float32 mlp_distance_boundary_regulatity
#float32 mlp_distance_mean_curvature
#float32 mlp_distance_mean_angular_difference
#float32 mlp_distance_aspect_ratio
#float32 mlp_distance_kurtosis

#float32 div_number_std_deviation
#float32 div_number_mean_average_deviation_from_median
#float32 div_number_width
#float32 div_number_linearity
#float32 div_number_radius
#float32 div_number_circularity
#float32 div_number_boundary_length
#float32 div_number_boundary_regulatity
#float32 div_number_mean_curvature
#float32 div_number_mean_angular_difference
#float32 div_number_aspect_ratio
#float32 div_number_kurtosis

#float32 mlp_number_std_deviation
#float32 mlp_number_mean_average_deviation_from_median
#float32 mlp_number_width
#float32 mlp_number_linearity
#float32 mlp_number_radius
#float32 mlp_number_circularity
#float32 mlp_number_boundary_length
#float32 mlp_number_boundary_regulatity
#float32 mlp_number_mean_curvature
#float32 mlp_number_mean_angular_difference
#float32 mlp_number_aspect_ratio
#float32 mlp_number_kurtosis


float32 nn_number_of_points
float32 nn_std_deviation
float32 nn_mean_average_deviation_from_median
float32 nn_width
float32 nn_linearity
float32 nn_radius
float32 nn_circularity
float32 nn_boundary_length
float32 nn_boundary_regulatity
float32 nn_mean_curvature
float32 nn_mean_angular_difference
float32 nn_aspect_ratio
float32 nn_kurtosis


================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z"""
  __slots__ = ['points','class_id','center','distance','nearest_neghbour_id','jump_distance_preceeding','jump_distance_succeeding','nearest_distance','sum_of_distances','number_of_points','std_deviation','mean_average_deviation_from_median','width','linearity','radius','circularity','boundary_length','boundary_regulatity','mean_curvature','mean_angular_difference','aspect_ratio','kurtosis','nn_number_of_points','nn_std_deviation','nn_mean_average_deviation_from_median','nn_width','nn_linearity','nn_radius','nn_circularity','nn_boundary_length','nn_boundary_regulatity','nn_mean_curvature','nn_mean_angular_difference','nn_aspect_ratio','nn_kurtosis']
  _slot_types = ['geometry_msgs/Point32[]','float32','geometry_msgs/Point32','float32','int32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       points,class_id,center,distance,nearest_neghbour_id,jump_distance_preceeding,jump_distance_succeeding,nearest_distance,sum_of_distances,number_of_points,std_deviation,mean_average_deviation_from_median,width,linearity,radius,circularity,boundary_length,boundary_regulatity,mean_curvature,mean_angular_difference,aspect_ratio,kurtosis,nn_number_of_points,nn_std_deviation,nn_mean_average_deviation_from_median,nn_width,nn_linearity,nn_radius,nn_circularity,nn_boundary_length,nn_boundary_regulatity,nn_mean_curvature,nn_mean_angular_difference,nn_aspect_ratio,nn_kurtosis

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Segment_featured, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.points is None:
        self.points = []
      if self.class_id is None:
        self.class_id = 0.
      if self.center is None:
        self.center = geometry_msgs.msg.Point32()
      if self.distance is None:
        self.distance = 0.
      if self.nearest_neghbour_id is None:
        self.nearest_neghbour_id = 0
      if self.jump_distance_preceeding is None:
        self.jump_distance_preceeding = 0.
      if self.jump_distance_succeeding is None:
        self.jump_distance_succeeding = 0.
      if self.nearest_distance is None:
        self.nearest_distance = 0.
      if self.sum_of_distances is None:
        self.sum_of_distances = 0.
      if self.number_of_points is None:
        self.number_of_points = 0.
      if self.std_deviation is None:
        self.std_deviation = 0.
      if self.mean_average_deviation_from_median is None:
        self.mean_average_deviation_from_median = 0.
      if self.width is None:
        self.width = 0.
      if self.linearity is None:
        self.linearity = 0.
      if self.radius is None:
        self.radius = 0.
      if self.circularity is None:
        self.circularity = 0.
      if self.boundary_length is None:
        self.boundary_length = 0.
      if self.boundary_regulatity is None:
        self.boundary_regulatity = 0.
      if self.mean_curvature is None:
        self.mean_curvature = 0.
      if self.mean_angular_difference is None:
        self.mean_angular_difference = 0.
      if self.aspect_ratio is None:
        self.aspect_ratio = 0.
      if self.kurtosis is None:
        self.kurtosis = 0.
      if self.nn_number_of_points is None:
        self.nn_number_of_points = 0.
      if self.nn_std_deviation is None:
        self.nn_std_deviation = 0.
      if self.nn_mean_average_deviation_from_median is None:
        self.nn_mean_average_deviation_from_median = 0.
      if self.nn_width is None:
        self.nn_width = 0.
      if self.nn_linearity is None:
        self.nn_linearity = 0.
      if self.nn_radius is None:
        self.nn_radius = 0.
      if self.nn_circularity is None:
        self.nn_circularity = 0.
      if self.nn_boundary_length is None:
        self.nn_boundary_length = 0.
      if self.nn_boundary_regulatity is None:
        self.nn_boundary_regulatity = 0.
      if self.nn_mean_curvature is None:
        self.nn_mean_curvature = 0.
      if self.nn_mean_angular_difference is None:
        self.nn_mean_angular_difference = 0.
      if self.nn_aspect_ratio is None:
        self.nn_aspect_ratio = 0.
      if self.nn_kurtosis is None:
        self.nn_kurtosis = 0.
    else:
      self.points = []
      self.class_id = 0.
      self.center = geometry_msgs.msg.Point32()
      self.distance = 0.
      self.nearest_neghbour_id = 0
      self.jump_distance_preceeding = 0.
      self.jump_distance_succeeding = 0.
      self.nearest_distance = 0.
      self.sum_of_distances = 0.
      self.number_of_points = 0.
      self.std_deviation = 0.
      self.mean_average_deviation_from_median = 0.
      self.width = 0.
      self.linearity = 0.
      self.radius = 0.
      self.circularity = 0.
      self.boundary_length = 0.
      self.boundary_regulatity = 0.
      self.mean_curvature = 0.
      self.mean_angular_difference = 0.
      self.aspect_ratio = 0.
      self.kurtosis = 0.
      self.nn_number_of_points = 0.
      self.nn_std_deviation = 0.
      self.nn_mean_average_deviation_from_median = 0.
      self.nn_width = 0.
      self.nn_linearity = 0.
      self.nn_radius = 0.
      self.nn_circularity = 0.
      self.nn_boundary_length = 0.
      self.nn_boundary_regulatity = 0.
      self.nn_mean_curvature = 0.
      self.nn_mean_angular_difference = 0.
      self.nn_aspect_ratio = 0.
      self.nn_kurtosis = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_5fi30f().pack(_x.class_id, _x.center.x, _x.center.y, _x.center.z, _x.distance, _x.nearest_neghbour_id, _x.jump_distance_preceeding, _x.jump_distance_succeeding, _x.nearest_distance, _x.sum_of_distances, _x.number_of_points, _x.std_deviation, _x.mean_average_deviation_from_median, _x.width, _x.linearity, _x.radius, _x.circularity, _x.boundary_length, _x.boundary_regulatity, _x.mean_curvature, _x.mean_angular_difference, _x.aspect_ratio, _x.kurtosis, _x.nn_number_of_points, _x.nn_std_deviation, _x.nn_mean_average_deviation_from_median, _x.nn_width, _x.nn_linearity, _x.nn_radius, _x.nn_circularity, _x.nn_boundary_length, _x.nn_boundary_regulatity, _x.nn_mean_curvature, _x.nn_mean_angular_difference, _x.nn_aspect_ratio, _x.nn_kurtosis))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.points is None:
        self.points = None
      if self.center is None:
        self.center = geometry_msgs.msg.Point32()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.points.append(val1)
      _x = self
      start = end
      end += 144
      (_x.class_id, _x.center.x, _x.center.y, _x.center.z, _x.distance, _x.nearest_neghbour_id, _x.jump_distance_preceeding, _x.jump_distance_succeeding, _x.nearest_distance, _x.sum_of_distances, _x.number_of_points, _x.std_deviation, _x.mean_average_deviation_from_median, _x.width, _x.linearity, _x.radius, _x.circularity, _x.boundary_length, _x.boundary_regulatity, _x.mean_curvature, _x.mean_angular_difference, _x.aspect_ratio, _x.kurtosis, _x.nn_number_of_points, _x.nn_std_deviation, _x.nn_mean_average_deviation_from_median, _x.nn_width, _x.nn_linearity, _x.nn_radius, _x.nn_circularity, _x.nn_boundary_length, _x.nn_boundary_regulatity, _x.nn_mean_curvature, _x.nn_mean_angular_difference, _x.nn_aspect_ratio, _x.nn_kurtosis,) = _get_struct_5fi30f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_5fi30f().pack(_x.class_id, _x.center.x, _x.center.y, _x.center.z, _x.distance, _x.nearest_neghbour_id, _x.jump_distance_preceeding, _x.jump_distance_succeeding, _x.nearest_distance, _x.sum_of_distances, _x.number_of_points, _x.std_deviation, _x.mean_average_deviation_from_median, _x.width, _x.linearity, _x.radius, _x.circularity, _x.boundary_length, _x.boundary_regulatity, _x.mean_curvature, _x.mean_angular_difference, _x.aspect_ratio, _x.kurtosis, _x.nn_number_of_points, _x.nn_std_deviation, _x.nn_mean_average_deviation_from_median, _x.nn_width, _x.nn_linearity, _x.nn_radius, _x.nn_circularity, _x.nn_boundary_length, _x.nn_boundary_regulatity, _x.nn_mean_curvature, _x.nn_mean_angular_difference, _x.nn_aspect_ratio, _x.nn_kurtosis))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.points is None:
        self.points = None
      if self.center is None:
        self.center = geometry_msgs.msg.Point32()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.points.append(val1)
      _x = self
      start = end
      end += 144
      (_x.class_id, _x.center.x, _x.center.y, _x.center.z, _x.distance, _x.nearest_neghbour_id, _x.jump_distance_preceeding, _x.jump_distance_succeeding, _x.nearest_distance, _x.sum_of_distances, _x.number_of_points, _x.std_deviation, _x.mean_average_deviation_from_median, _x.width, _x.linearity, _x.radius, _x.circularity, _x.boundary_length, _x.boundary_regulatity, _x.mean_curvature, _x.mean_angular_difference, _x.aspect_ratio, _x.kurtosis, _x.nn_number_of_points, _x.nn_std_deviation, _x.nn_mean_average_deviation_from_median, _x.nn_width, _x.nn_linearity, _x.nn_radius, _x.nn_circularity, _x.nn_boundary_length, _x.nn_boundary_regulatity, _x.nn_mean_curvature, _x.nn_mean_angular_difference, _x.nn_aspect_ratio, _x.nn_kurtosis,) = _get_struct_5fi30f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_5fi30f = None
def _get_struct_5fi30f():
    global _struct_5fi30f
    if _struct_5fi30f is None:
        _struct_5fi30f = struct.Struct("<5fi30f")
    return _struct_5fi30f
